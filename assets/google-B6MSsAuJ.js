import{j as F}from"./index-CGqGl1e2.js";async function T(o,e){return new Promise((r,t)=>{const i=document.createElement("script");i.src=o,i.async=!0,i.defer=!0,i.onload=()=>{r()},i.onerror=()=>t(new Error(`Failed to load script: ${o}`)),document.head.appendChild(i)})}const $="111515033736-dffaqu4qg36n2ovfhpaa7qgtndd3u4q2.apps.googleusercontent.com";let p=null;const h=async o=>{try{const e=await fetch("https://www.googleapis.com/oauth2/v2/userinfo",{headers:{Authorization:`Bearer ${o}`}});if(e.ok){const r=await e.json();return{username:r.name||r.email.split("@")[0],email:r.email}}else{const r=await e.json();throw new Error(`Failed to fetch user info: ${r.error.message}`)}}catch(e){return console.error("Error fetching user info:",e),console.error("Failed to fetch user info: "+e.message),null}};async function E(){if(typeof google>"u"||!google.accounts.oauth2)try{await T("https://accounts.google.com/gsi/client"),await T("https://apis.google.com/js/api.js")}catch(o){console.error("Script loading error:",o)}}const C=async()=>{let o={};if(E(),!window.google||!window.google.accounts||!window.google.accounts.oauth2)throw console.error("Google API script not loaded."),new Error("Google API is not available. Please try again later.");const e=await new Promise((t,i)=>{p=google.accounts.oauth2.initTokenClient({client_id:$,scope:"https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",callback:async n=>{console.log("Token Response:",n),n!=null&&n.access_token?t(n):(console.error("No access token received:",n),i(new Error("Failed to obtain access token.")))},error_callback:n=>{i(n)}}),p.requestAccessToken({prompt:"consent"})});o.accessToken=e.access_token;const r=await h(e.access_token);if(r!=null&&r.email)return await f(),o={...o,...r},o;throw console.error("Invalid user info:",r),new Error("Failed to fetch user information.")};async function v(o,e){return console.log("Initializing token client"),o!=null&&o.accessToken?o:await C()}const f=async()=>{if(typeof gapi>"u"){console.error("Google API Client Library not loaded");return}return new Promise(o=>{gapi.load("picker",{callback:o})})},S=async()=>new Promise((o,e)=>{p?p.requestAccessToken({prompt:"",callback:async r=>{if(r&&r.access_token){accessToken.value=r.access_token;const t=await h(r.access_token);t&&userStore.getUserByEmail(t.email)&&(userStore.updateUser(t.email,{accessToken:r.access_token}),console.log("Access token updated in store for:",t.email)),o(accessToken.value)}else e(new Error("Failed to refresh access token"))}}):e(new Error("Token client not initialized"))}),B=async o=>{const e=await v(o);await f();const r=await new Promise((t,i)=>{const n=a=>{a.action===google.picker.Action.PICKED&&t(a.docs[0])};new google.picker.PickerBuilder().setOAuthToken(e.accessToken).addView(new google.picker.DocsView().setIncludeFolders(!0).setSelectFolderEnabled(!0).setParent("root")).addView(new google.picker.DocsView(google.picker.ViewId.DOCS).setLabel("Google Drive").setMimeTypes("application/vnd.google-apps.document")).addView(new google.picker.DocsView(google.picker.ViewId.SHARED_WITH_ME).setLabel("Shared drives")).addView(new google.picker.DocsView(google.picker.ViewId.RECENTLY_PICKED).setLabel("Recent")).enableFeature(google.picker.Feature.SUPPORT_DRIVES).enableFeature(google.picker.Feature.MULTISELECT_ENABLED).setCallback(n).build().setVisible(!0)});return console.log(r),e.parent=r,e},z=async o=>{await E();const e=await v(o);await f();const r=new google.picker.DocsView(google.picker.ViewId.DOCS).setMimeTypes("application/json").setQuery("*.treegridio");return new Promise((t,i)=>{new google.picker.PickerBuilder().addView(r).setOAuthToken(e.accessToken).setCallback(s=>{s.action===google.picker.Action.PICKED&&(console.error("Selected file: "+s.docs[0].name),t({...e,file:s.docs[0]}))}).build().setVisible(!0)})},V=async(o,e,r)=>{var m,k,y;if(!o||typeof o!="object")throw new Error("Invalid or missing data object");if(e&&typeof e!="object")throw new Error("Invalid path");const t=(m=e==null?void 0:e.parent)==null?void 0:m.id;if(t){let c;const u=await fetch(`https://www.googleapis.com/drive/v3/files/${t}/permissions/me?supportsAllDrives=true`,{method:"GET",headers:new Headers({Authorization:`Bearer ${r.accessToken}`})});if(u.status===401){r.accessToken=await S();const l=await fetch(`https://www.googleapis.com/drive/v3/files/${t}/permissions/me?supportsAllDrives=true`,{headers:new Headers({Authorization:`Bearer ${r.accessToken}`})});if(!l.ok){const j=await l.json();throw new Error(`Failed to verify permissions: ${j.error.message}`)}c=await l.json()}else if(u.ok)c=await u.json();else{const l=await u.json();throw new Error(`Failed to check permissions: ${l.error.message}`)}if(!["writer","owner"].includes(c.role))throw new Error("You do not have write permission for the selected folder. Please choose another folder.")}const i=JSON.stringify(o,null,2),n=new Blob([i],{type:"application/json"}),s=new FormData,a=(e==null?void 0:e.id)!==void 0&&((k=e==null?void 0:e.id)==null?void 0:k.trim())!=="",b=a?`https://www.googleapis.com/upload/drive/v3/files/${(y=e==null?void 0:e.id)==null?void 0:y.trim()}?uploadType=multipart&fields=id&supportsAllDrives=true`:"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&supportsAllDrives=true",A=a?"PATCH":"POST";if(!a){const c={name:e.fileName,mimeType:"application/json",parents:t?[t]:[]};s.append("metadata",new Blob([JSON.stringify(c)],{type:"application/json"}))}s.append("file",n);const d=`boundary_${crypto.randomUUID().replace(/-/g,"")}`,D={name:e.fileName},I=btoa(i),P=[`--${d}`,"Content-Type: application/json; charset=UTF-8","",JSON.stringify(D),`--${d}`,"Content-Transfer-Encoding: base64","",I,`--${d}--`].join(`\r
`),w=await fetch(b,{method:A,headers:{Authorization:`Bearer ${r.accessToken}`,"Content-Type":`multipart/related; boundary=${d}`},body:P});if(!w.ok){const c=await w.json();throw new Error(`Upload failed: ${c.error.message}`)}const g=await w.json();if(w.ok)return console.log(g),console.log(`File ${a?"updated":"created"}:`,g),g;throw new Error(`Error ${a?"updating":"creating"} file:`,g)},_=async(o,e)=>{if(!(e!=null&&e.accessToken))throw new Error("No access token found. Please sign in again.");if(!(o!=null&&o.id))throw new Error("Please select a file to read first.");const r=await fetch(`https://www.googleapis.com/drive/v3/files/${o.id}?fields=id,name,version,modifiedTime,description,lastModifyingUser&supportsAllDrives=true`,{method:"GET",headers:new Headers({Authorization:`Bearer ${e.accessToken}`})});if(!r.ok){const s=await r.json();throw s==null?void 0:s.error}const t=await r.json();console.log("File Metadata:",t);const i=await fetch(`https://www.googleapis.com/drive/v3/files/${o.id}?alt=media&supportsAllDrives=true`,{method:"GET",headers:new Headers({Authorization:`Bearer ${e.accessToken}`})});if(i.ok)return{content:await i.text(),metadata:t};const n=await i.json();throw new Error("Error reading file content:",n)};async function G(o,e){if(!o||typeof o!="object")throw"Invalid path";let r=await _(o,e),t=r!=null&&r.content?F(r.content):null;return{path:o,content:t}}async function N(o,e,r){return await V(o,e,r)}const L=!0,M="GoogleDrive";export{v as authorize,h as fetchUserInfo,L as isAuth,z as pickFile,B as pickFolder,G as readJsonAttachment,M as type,N as writeObjectToJsonAttachment};

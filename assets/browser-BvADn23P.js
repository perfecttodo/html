import{j as e}from"./index-D4o19w3s.js";function n(e,n){return new Promise((t,o)=>{const s=indexedDB.open(e,1);s.onerror=e=>{o(e.target.error)},s.onsuccess=e=>{t(e.target.result)},s.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains(n)||t.createObjectStore(n,{keyPath:"id"})}})}const t=async()=>{const e=await async function(){const e=document.createElement("div");e.id="overlay";const n=document.createElement("iframe");n.id="pickerFrame",e.appendChild(n),document.body.appendChild(e),e.style.cssText="\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        z-index: 999;\n        opacity: 0;\n        transition: opacity 0.3s ease;\n    ",n.style.cssText="\n        width: 500px;\n        height: 400px;\n        border: none;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%) scale(0.9);\n        background: white;\n        border: 1px solid #ccc;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        opacity: 0;\n        transition: all 0.3s ease;\n        border-radius: 8px;\n    ",e.offsetWidth,n.offsetWidth,e.style.opacity="1",n.style.opacity="1",n.style.transform="translate(-50%, -50%) scale(1)";const t=Date.now().toString(36)+Math.random().toString(36).substr(2);e.addEventListener("click",o=>{o.target===e&&n.contentWindow.postMessage({type:"cancel",instanceId:t,error:"Clicked outside"},"*")});const o=n.contentDocument||n.contentWindow.document;return o.open(),o.write(`\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <meta charset="UTF-8">\n            <style>\n                body {\n                    margin: 0;\n                    padding: 0;\n                    font-family: Arial, sans-serif;\n                    height: 100%;\n                }\n                .file-picker {\n                    width: 100%;\n                    height: 100%;\n                }\n                .container {\n                    padding: 20px;\n                    box-sizing: border-box;\n                    display: flex;\n                    flex-direction: column;\n                    flex-grow: 1;\n                    position: absolute;\n                    inset: 0;\n                }\n                .close-btn {\n                    position: absolute;\n                    top: 10px;\n                    right: 10px;\n                    font-size: 20px;\n                    border: none;\n                    background: none;\n                    cursor: pointer;\n                    color: #666;\n                }\n                .close-btn:hover {\n                    color: #333;\n                }\n                .search-bar {\n                    display: flex;\n                    align-items: center;\n                    gap: 8px;\n                }\n                #searchInput {\n                    padding: 8px;\n                    flex-grow: 1;\n                    border: 1px solid #ddd;\n                    border-radius: 4px;\n                }\n                button {\n                    padding: 8px 16px;\n                    background-color: #f0f0f0;\n                    border: 1px solid #ddd;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    transition: all 0.2s;\n                }\n                button:hover {\n                    background-color: #e0e0e0;\n                }\n                #itemList {\n                    flex-grow: 1;\n                    max-height: 250px;\n                    overflow-y: auto;\n                    border: 1px solid #eee;\n                    padding: 10px;\n                    margin-top: 15px;\n                }\n                #itemList p {\n                    margin: 5px 0;\n                    padding: 8px;\n                    cursor: pointer;\n                    border-radius: 4px;\n                    display: flex;\n                    justify-content: space-between;\n                    transition: background-color 0.2s;\n                }\n                #itemList p:hover {\n                    background-color: #f5f5f5;\n                }\n                #itemList p.selected {\n                    background-color: #e0f0ff;\n                    border-left: 4px solid #4a90e2;\n                }\n                .file-size {\n                    color: #666;\n                    font-size: 0.9em;\n                }\n                .no-items {\n                    color: #777;\n                    text-align: center;\n                    padding: 20px;\n                    display: none; /* Start hidden */\n                }\n                .button-container {\n                    display: flex;\n                    justify-content: flex-end;\n                    gap: 10px;\n                }\n                .button-container button:first-child {\n                    background-color: #4a90e2;\n                    color: white;\n                }\n                .button-container button:first-child:hover {\n                    background-color: #3a7bc8;\n                }\n            </style>\n        </head>\n        <body>\n            <div class="file-picker">\n                <div class="container">\n                    <button class="close-btn" onclick="closeDialog()">Ã—</button>\n                    <h3>Select a .treegridio file</h3>\n                    <div class="search-bar">\n                        <input type="text" id="searchInput" placeholder="Search .treegridio files..." onkeyup="filterItems()">\n                        <button onclick="searchItems()">Search</button>\n                    </div>\n                    <div id="itemList"></div>\n                    <p class="no-items" id="noItems">No .treegridio files found</p>\n                </div>\n            </div>\n            <script>\n                // Function to open the IndexedDB database\n                async function openDatabase(dbName, storeName) {\n                    return new Promise((resolve, reject) => {\n                        const request = indexedDB.open(dbName, 1);\n                        \n                        request.onerror = (event) => {\n                            reject(event.target.error);\n                        };\n                        \n                        request.onsuccess = (event) => {\n                            resolve(event.target.result);\n                        };\n                        \n                        request.onupgradeneeded = (event) => {\n                            const db = event.target.result;\n                            if (!db.objectStoreNames.contains(storeName)) {\n                                db.createObjectStore(storeName, { keyPath: 'id' });\n                            }\n                        };\n                    });\n                }\n\n                const instanceId = "${t}";\n                let selectedItem = null;\n\n                async function getAllTreegridioFiles() {\n                    const db = await openDatabase('database', 'files');\n                    return new Promise((resolve, reject) => {\n                        const transaction = db.transaction(['files'], 'readonly');\n                        const store = transaction.objectStore('files');\n                        const request = store.getAll();\n\n                        request.onerror = (event) => {\n                            reject(event.target.error);\n                        };\n\n                        request.onsuccess = (event) => {\n                            const files = event.target.result.map(file => ({\n                                name: file.id,\n                                size: file.data ? new Blob([file.data]).size : 0\n                            }));\n                            resolve(files);\n                        };\n                    });\n                }\n\n\n\n                function formatFileSize(bytes) {\n                    if (bytes === 0) return '0 Bytes';\n                    const k = 1024;\n                    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n                    const i = Math.floor(Math.log(bytes) / Math.log(k));\n                    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n                }\n\n                async function loadItems() {\n                    const files = await getAllTreegridioFiles();\n                    const list = document.getElementById('itemList');\n                    const noItems = document.getElementById('noItems');\n                    list.innerHTML = '';\n                    \n                    if (files.length === 0) {\n                        noItems.style.display = 'block';\n                    } else {\n                        noItems.style.display = 'none';\n                        files.forEach(file => {\n                            const p = document.createElement('p');\n                            p.innerHTML = \`\n                                <span>\${file.name}</span>\n                                <span class="file-size">\${formatFileSize(file.size)}</span>\n                            \`;\n                            \n                            // Single click to select\n                            p.onclick = () => {\n                                const prevSelected = list.querySelector('.selected');\n                                if (prevSelected) prevSelected.classList.remove('selected');\n                                p.classList.add('selected');\n                                selectedItem = file.name;\n                                selectItem();\n                            };\n                            \n                            list.appendChild(p);\n                        });\n                    }\n                }\n\n                function filterItems() {\n                    const input = document.getElementById('searchInput').value.toLowerCase();\n                    loadItems().then(files => {\n                        const list = document.getElementById('itemList');\n                        list.innerHTML = '';\n                        selectedItem = null;\n\n                        const filtered = files.filter(file => \n                            file.name.toLowerCase().includes(input)\n                        );\n                        \n                        const noItems = document.getElementById('noItems');                    \n                        if (filtered.length === 0) {\n                            noItems.style.display = 'block';\n                        } else {\n                            noItems.style.display = 'none';\n                            filtered.forEach(file => {\n                                const p = document.createElement('p');\n                                p.innerHTML = \`\n                                    <span>\${file.name}</span>\n                                    <span class="file-size">\${formatFileSize(file.size)}</span>\n                                \`;\n                                \n                                p.onclick = () => {\n                                    const prevSelected = list.querySelector('.selected');\n                                    if (prevSelected) prevSelected.classList.remove('selected');\n                                    p.classList.add('selected');\n                                    selectedItem = file.name;\n                                    selectItem();\n                                };\n\n                                list.appendChild(p);\n                            });\n                        }\n                    });\n                }\n\n                function searchItems() {\n                    filterItems();\n                }\n\n                function selectItem() {\n                    if (!selectedItem) {\n                        alert('Please select a file first');\n                        return;\n                    }\n                    window.parent.postMessage({\n                        type: 'select',\n                        instanceId: instanceId,\n                        value: selectedItem\n                    }, '*');\n                }\n\n                function cancel() {\n                    window.parent.postMessage({\n                        type: 'cancel',\n                        instanceId: instanceId,\n                        error: 'Selection cancelled'\n                    }, '*');\n                }\n\n                function closeDialog() {\n                    window.parent.postMessage({\n                        type: 'cancel',\n                        instanceId: instanceId,\n                        error: 'Dialog closed'\n                    }, '*');\n                }\n\n                document.addEventListener('keydown', function(e) {\n                    if (e.key === 'Escape') {\n                        closeDialog();\n                    } else if (e.key === 'Enter' && document.activeElement.id !== 'searchInput') {\n                        selectItem();\n                    }\n                });\n\n                // Initialize\n                document.getElementById('searchInput').focus();\n                loadItems();\n            <\/script>\n        </body>\n        </html>\n    `),o.close(),new Promise((n,o)=>{const s=async i=>{if(i.data.instanceId!==t)return;const r=()=>{window.removeEventListener("message",s),e.style.opacity="0",setTimeout(()=>{e.parentNode&&e.parentNode.removeChild(e)},300)};if("select"===i.data.type){r();try{n({filename:i.data.value})}catch(a){o(a)}}else"cancel"===i.data.type&&(r(),o(new Error(i.data.error)))};window.addEventListener("message",s)})}();return{mode:"B",file:{...e,id:e.filename}}};async function o(t){if(!t||"object"!=typeof t)throw new Error("Invalid or missing path");const o=await n("database","files");return new Promise((n,s)=>{const i=o.transaction(["files"],"readonly").objectStore("files").get(t.id);i.onerror=e=>{s({code:404,error:`No data found with filename ${t.id}`})},i.onsuccess=o=>{const i=o.target.result;if(i){const o=e(i.data);n({content:o,path:{...t,fileName:t.id}})}else s({code:404,error:`No data found with filename ${t.id}`})}})}async function s(e,t){if(!e||"object"!=typeof e)throw new Error("Invalid or missing data object");if(!t||"object"!=typeof t)throw new Error("Invalid or missing path");const o=await n("database","files");return new Promise((n,s)=>{const i=o.transaction(["files"],"readwrite").objectStore("files"),r=JSON.stringify(e,null,2),a=i.put({id:t.fileName,data:r});a.onerror=e=>{s(e.target.error)},a.onsuccess=()=>{n({...t,id:t.fileName})}})}const i="Browser";export{t as pickFile,o as readJsonAttachment,i as type,s as writeObjectToJsonAttachment};

import{J as e}from"./index-JtBdI5-t.js";import{p as t}from"./browserPickfile-Bj008PKt.js";function r(e,t){return new Promise((r,o)=>{const n=indexedDB.open(e,1);n.onerror=e=>{o(e.target.error)},n.onsuccess=e=>{r(e.target.result)},n.onupgradeneeded=e=>{const r=e.target.result;r.objectStoreNames.contains(t)||r.createObjectStore(t,{keyPath:"id"})}})}const o=async()=>{const e=await t();return{mode:"B",file:{...e,id:e.filename}}};async function n(t){if(!t||"object"!=typeof t)throw new Error("Invalid or missing path");const o=await r("database","files");return new Promise((r,n)=>{const i=o.transaction(["files"],"readonly").objectStore("files").get(t.id);i.onerror=e=>{n({code:404,error:`No data found with filename ${t.id}`})},i.onsuccess=o=>{const i=o.target.result;if(i){const o=e.parse(i.data);r({content:o,path:{...t,fileName:t.id}})}else n({code:404,error:`No data found with filename ${t.id}`})}})}async function i(t,o){if(!t||"object"!=typeof t)throw new Error("Invalid or missing data object");if(!o||"object"!=typeof o)throw new Error("Invalid or missing path");const n=await r("database","files");return new Promise((r,i)=>{const a=n.transaction(["files"],"readwrite").objectStore("files"),s=e.stringify(t,null,2),c=a.put({id:o.fileName,data:s});c.onerror=e=>{i(e.target.error)},c.onsuccess=()=>{r({...o,id:o.fileName})}})}const a="Browser";export{o as pickFile,n as readJsonAttachment,a as type,i as writeObjectToJsonAttachment};

import{j as e}from"./index-D_BCUuHs.js";async function o(e,o){return new Promise((o,t)=>{const a=document.createElement("script");a.src=e,a.async=!0,a.defer=!0,a.onload=()=>{o()},a.onerror=()=>t(new Error(`Failed to load script: ${e}`)),document.head.appendChild(a)})}let t=null;const a=async e=>{try{const o=await fetch("https://www.googleapis.com/oauth2/v2/userinfo",{headers:{Authorization:`Bearer ${e}`}});if(o.ok){const e=await o.json();return{username:e.name||e.email.split("@")[0],email:e.email}}{const e=await o.json();throw new Error(`Failed to fetch user info: ${e.error.message}`)}}catch(o){return null}};async function i(){if("undefined"==typeof google||!google.accounts.oauth2)try{await o("https://accounts.google.com/gsi/client"),await o("https://apis.google.com/js/api.js")}catch(e){}}async function n(e,o){return(null==e?void 0:e.accessToken)?e:await(async()=>{let e={};if(i(),!window.google||!window.google.accounts||!window.google.accounts.oauth2)throw new Error("Google API is not available. Please try again later.");const o=await new Promise((e,o)=>{t=google.accounts.oauth2.initTokenClient({client_id:"111515033736-dffaqu4qg36n2ovfhpaa7qgtndd3u4q2.apps.googleusercontent.com",scope:"https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",callback:async t=>{(null==t?void 0:t.access_token)?e(t):o(new Error("Failed to obtain access token."))},error_callback:e=>{o(e)}}),t.requestAccessToken({prompt:"consent"})});e.accessToken=o.access_token;const n=await a(o.access_token);if(null==n?void 0:n.email)return await r(),e={...e,...n},e;throw new Error("Failed to fetch user information.")})()}const r=async()=>{if("undefined"!=typeof gapi)return new Promise(e=>{gapi.load("picker",{callback:e})})},s=async e=>{const o=await n(e);await r();const t=await new Promise((e,t)=>{(new google.picker.PickerBuilder).setOAuthToken(o.accessToken).addView((new google.picker.DocsView).setIncludeFolders(!0).setSelectFolderEnabled(!0).setParent("root")).addView(new google.picker.DocsView(google.picker.ViewId.DOCS).setLabel("Google Drive").setMimeTypes("application/vnd.google-apps.document")).addView(new google.picker.DocsView(google.picker.ViewId.SHARED_WITH_ME).setLabel("Shared drives")).addView(new google.picker.DocsView(google.picker.ViewId.RECENTLY_PICKED).setLabel("Recent")).enableFeature(google.picker.Feature.SUPPORT_DRIVES).enableFeature(google.picker.Feature.MULTISELECT_ENABLED).setCallback(o=>{o.action===google.picker.Action.PICKED&&e(o.docs[0])}).build().setVisible(!0)});return o.parent=t,o},c=async e=>{await i();const o=await n(e);await r();const t=new google.picker.DocsView(google.picker.ViewId.DOCS).setMimeTypes("application/json").setQuery("*.treegridio");return new Promise((e,a)=>{(new google.picker.PickerBuilder).addView(t).setOAuthToken(o.accessToken).setCallback(t=>{t.action===google.picker.Action.PICKED&&e({...o,file:t.docs[0]})}).build().setVisible(!0)})},l=async(e,o,i)=>{var n,r,s;if(!e||"object"!=typeof e)throw new Error("Invalid or missing data object");if(o&&"object"!=typeof o)throw new Error("Invalid path");const c=null==(n=null==o?void 0:o.parent)?void 0:n.id;if(c){let e;const o=await fetch(`https://www.googleapis.com/drive/v3/files/${c}/permissions/me?supportsAllDrives=true`,{method:"GET",headers:new Headers({Authorization:`Bearer ${i.accessToken}`})});if(401===o.status){i.accessToken=await(async()=>new Promise((e,o)=>{t?t.requestAccessToken({prompt:"",callback:async t=>{if(t&&t.access_token){accessToken.value=t.access_token;const o=await a(t.access_token);o&&userStore.getUserByEmail(o.email)&&userStore.updateUser(o.email,{accessToken:t.access_token}),e(accessToken.value)}else o(new Error("Failed to refresh access token"))}}):o(new Error("Token client not initialized"))}))();const o=await fetch(`https://www.googleapis.com/drive/v3/files/${c}/permissions/me?supportsAllDrives=true`,{headers:new Headers({Authorization:`Bearer ${i.accessToken}`})});if(!o.ok){const e=await o.json();throw new Error(`Failed to verify permissions: ${e.error.message}`)}e=await o.json()}else{if(!o.ok){const e=await o.json();throw new Error(`Failed to check permissions: ${e.error.message}`)}e=await o.json()}if(!["writer","owner"].includes(e.role))throw new Error("You do not have write permission for the selected folder. Please choose another folder.")}const l=JSON.stringify(e,null,2),d=new Blob([l],{type:"application/json"}),w=new FormData,p=void 0!==(null==o?void 0:o.id)&&""!==(null==(r=null==o?void 0:o.id)?void 0:r.trim()),u=p?`https://www.googleapis.com/upload/drive/v3/files/${null==(s=null==o?void 0:o.id)?void 0:s.trim()}?uploadType=multipart&fields=id&supportsAllDrives=true`:"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&supportsAllDrives=true",g=p?"PATCH":"POST";if(!p){const e={name:o.fileName,mimeType:"application/json",parents:c?[c]:[]};w.append("metadata",new Blob([JSON.stringify(e)],{type:"application/json"}))}w.append("file",d);const f=`boundary_${crypto.randomUUID().replace(/-/g,"")}`,h={name:o.fileName},m=btoa(l),k=[`--${f}`,"Content-Type: application/json; charset=UTF-8","",JSON.stringify(h),`--${f}`,"Content-Transfer-Encoding: base64","",m,`--${f}--`].join("\r\n"),v=await fetch(u,{method:g,headers:{Authorization:`Bearer ${i.accessToken}`,"Content-Type":`multipart/related; boundary=${f}`},body:k});if(!v.ok){const e=await v.json();throw new Error(`Upload failed: ${e.error.message}`)}const y=await v.json();if(v.ok)return y;throw new Error(`Error ${p?"updating":"creating"} file:`,y)};async function d(o,t){if(!o||"object"!=typeof o)throw"Invalid path";let a=await(async(e,o)=>{if(!(null==o?void 0:o.accessToken))throw new Error("No access token found. Please sign in again.");if(!(null==e?void 0:e.id))throw new Error("Please select a file to read first.");const t=await fetch(`https://www.googleapis.com/drive/v3/files/${e.id}?fields=id,name,version,modifiedTime,description,lastModifyingUser&supportsAllDrives=true`,{method:"GET",headers:new Headers({Authorization:`Bearer ${o.accessToken}`})});if(!t.ok){const e=await t.json();throw null==e?void 0:e.error}const a=await t.json(),i=await fetch(`https://www.googleapis.com/drive/v3/files/${e.id}?alt=media&supportsAllDrives=true`,{method:"GET",headers:new Headers({Authorization:`Bearer ${o.accessToken}`})});if(i.ok)return{content:await i.text(),metadata:a};const n=await i.json();throw new Error("Error reading file content:",n)})(o,t);return{path:o,content:(null==a?void 0:a.content)?e(a.content):null}}async function w(e,o,t){return await l(e,o,t)}const p=!0,u="GoogleDrive";export{n as authorize,a as fetchUserInfo,p as isAuth,c as pickFile,s as pickFolder,d as readJsonAttachment,u as type,w as writeObjectToJsonAttachment};
